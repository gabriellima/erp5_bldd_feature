<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>scenario_description = context.getProperty(\'text_area_field\')\n
if not scenario_description:\n
  print "ERROR: Steps not found!"\n
  return printed\n
\n
import re\n
\n
scenario = scenario_description.strip()\n
steps = [step.strip() for step in scenario.split(\'\\n\')]\n
\n
# patch portalWorkflow\n
context.WorkflowAnalyzer_patchPortalWorkflow()\n
\n
# encapsulate behaviour in a block\n
# so that portalWorkflow is inevitably unpatched\n
try:\n
\n
    for step in steps:\n
      create_object_step = re.match("(Given|And) that I have a \'([^\']+)\'", step)\n
      fire_transaction_step = re.match("(When|And) I trigger \'([^\']+)\'", step)\n
      check_state_step = re.match("(Then|And) it should be in \'([^\']+)\'", step)\n
\n
      if create_object_step:\n
        portal_type = create_object_step.groups()[1]\n
        # find container that support portal_type, or raise error instead\n
        #portal_type_module = \'\'.join([portal_type.replace(\' \', \'_\').lower(), \'_module\'])\n
        portal = context.getPortalObject()\n
        containers = [portal[x] for x in portal if \\\n
                        x.endswith(\'_module\') and \\\n
                        portal_type in portal[x].getVisibleAllowedContentTypeList()]\n
        if len(containers):\n
          # choose first\n
          portal_type_module = containers[0]\n
          print "Creating %s at module %s" % (portal_type, portal_type_module)\n
        else:\n
          raise TypeError("No module found that support portal_type %s" % portal_type)\n
\n
        # create object\n
        print "creating object of portal_type \'%s\' at \'%s\'" % (portal_type, portal_type_module)\n
        #step_object = context.getPortalObject()[portal_type_module].newContent(portal_type=portal_type)\n
        step_object = portal_type_module.newContent(portal_type=portal_type)\n
\n
      elif fire_transaction_step:\n
        # fire transaction\n
        tdef = fire_transaction_step.groups()[1]\n
        wf = context.getPortalObject().portal_workflow\n
        print "firing \'%s\' at \'%s\'" % (tdef, step_object.getPath())\n
        try:\n
          wf.doActionFor(step_object, tdef)\n
        except:\n
          print "WARNING: Failed to fire \'%s\' at \'%s\'" % (tdef, step_object.getPath())\n
\n
      elif check_state_step:\n
        # check state\n
        expected_state = check_state_step.groups()[1]\n
        actual_state = step_object.getSimulationState()\n
        print "checking state \'%s\' of \'%s\'" % (expected_state, step_object.getPath())\n
        try: \n
          assert(actual_state == expected_state)\n
        except AssertionError:\n
          print "ERROR: Expecting \'%s\' to be in state \'%s\', but got \'%s\'" % (step_object.getPath(), expected_state, actual_state)\n
      else:\n
        print "Ignoring step: \'%s\'" % step\n
\n
    # find manipulated workflows\n
    # NOTE: ignoring \'edit_workflow\'\n
    if hasattr(context.getPortalObject().portal_workflow, \'analyzer_modified_objects\'):\n
      manipulated_workflows = getattr(context.getPortalObject().portal_workflow, \'analyzer_modified_objects\')\n
      workflow_ids = [key for key in manipulated_workflows.keys() if key != \'edit_workflow\']\n
\n
    # show manipulated workflows\n
    for wf_id in workflow_ids:\n
      print "\\nTests that manipulate workflow \'%s\': \\n" % wf_id\n
      try: \n
        related_tests = context.WorkflowAnalyzer_rescueTransactions(workflow_id=wf_id)\n
        for test_class in related_tests.keys():\n
          print \'%s: \' % test_class, related_tests[test_class].keys()\n
      except KeyError, e:\n
        print \'WARNING: %s\' % e\n
\n
finally:\n
  # unpatch portalWorkflow\n
  context.WorkflowAnalyzer_unpatchPortalWorkflow()\n
\n
return printed\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>_proxy_roles</string> </key>
            <value>
              <tuple>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Scenario_executeSteps</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
